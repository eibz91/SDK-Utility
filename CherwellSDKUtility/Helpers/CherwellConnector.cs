using System;
using System.Collections.Generic;
using System.Linq;

using Trebuchet;
using Trebuchet.API;

using CherwellSDKUtility.Models;

namespace CherwellSDKUtility.Helpers
{
    public class CherwellConnector
    {
        #region Constructor

        public CherwellConnector()
        {
        }

        #endregion

        #region Public Methods

        /// <summary>Login to the Trebuchet API.</summary>
        /// <param name="username">Username of Cherwell User to Login with.</param>
        /// <param name="password">Password of Cherwell User to Login with.</param>
        /// <param name="connectionName">Name of Cherwell Connection, prefixed with [Common] (implies a connection available to all users on a machine) Or [User] (is for the current user's connections).</param>
        /// <returns>True if Login is successful.</returns>
        internal bool Login(string username, string password, string connectionName)
        {
            if (!TrebuchetApi.Api.Connected)
            {
                TrebuchetApi.Api.Connect(connectionName);
            }

            bool login = TrebuchetApi.Api.Login(ApplicationType.RichClient, username, password, false, LicensedProductCode.CherwellServiceDesk, "SAM", "Sample Application");

            if (login) return true;

            // If login fails, but connection to API was successful - Disconnect from the API.
            if (TrebuchetApi.Api.Connected)
                TrebuchetApi.Api.Disconnect();

            return false;
        }

        /// <summary>Logout and disconnect the Cherwell API</summary>
        /// <returns>Always returns false to show user is not logged in.</returns>
        internal bool Logout()
        {
            if (TrebuchetApi.Api.LoggedIn)
                TrebuchetApi.Api.Logout(LicensedProductCode.CherwellServiceDesk, "SAM");
            if (TrebuchetApi.Api.Connected)
                TrebuchetApi.Api.Disconnect();

            return false;
        }

        /// <summary>Create Business Object record.</summary>
        /// <param name="objectName">Name of Business Object type to create, eg. 'Incident'.</param>
        /// <param name="objectXml">XML String to create object - Generated by CherwellBusinessObject class.</param>
        /// <returns>Record ID of created record, or error if unsuccessful.</returns>
        public string CreateBusinessObject(string objectName, string objectXml)
        {
            BusinessObjectDef busObDef = null;

            if (!string.IsNullOrEmpty(objectName))
                busObDef = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, objectName)) as BusinessObjectDef;

            if (busObDef == null) return "Error creating new object: Object Name not found.";

            try
            {
                BusinessObject bo = TrebuchetApi.Api.BusObServices.CreateBusinessObject(busObDef);
                OperationResult result = bo.UpdateFromXml(objectXml);
                if (result.Success)
                    result = bo.Save();

                if (!result.Success)
                    return string.Format("Error creating new object: {0}", result.ErrorText);

                return bo.RecId;
            }
            catch (Exception e)
            {
                return string.Format("Error creating new object: {0}", e);
            }     
        }

        /// <summary>Update Business Object record.</summary>
        /// <param name="objectName">Name of Business Object type to update, eg. 'Incident'.</param>
        /// <param name="recId">Record ID of Business Object record to update.</param>
        /// <param name="objectXml">XML String to update object - Generated by CherwellBusinessObject class.</param>
        /// <returns>Record ID of updated record, or error if unsuccessful.</returns>
        public string UpdateBusinessObject(string objectName, string recId, string objectXml)
        {
            try
            {
                BusinessObject bo = TrebuchetApi.Api.BusObServices.GetBusinessObjectByNameAndRecId(objectName, recId);
                OperationResult result = bo.UpdateFromXml(objectXml, BusObFromXmlOptions.AutoMerge);

                if (result.Success)
                    bo.Save();

                return bo.RecId;
            }
            catch (Exception e)
            {
                return string.Format("Error updating object: {0}", e);
            }
        }

        /// <summary>Delete Business Object record.</summary>
        /// <param name="objectName">Name of Business Object type to delete, eg. 'Incident'.</param>
        /// <param name="recId">Record ID of Business Object record to delete.</param>
        /// <returns>"Record deleted" message, or error if unsuccessful.</returns>
        public string DeleteBusinessObject(string objectName, string recId)
        {
            try
            {
                BusinessObject bo = TrebuchetApi.Api.BusObServices.GetBusinessObjectByNameAndRecId(objectName, recId);
                TrebuchetApi.Api.BusObServices.DeleteBusinessObject(bo);

                return "Record deleted";
            }
            catch (Exception e)
            {
                return string.Format("Error deleting object: {0}", e);
            }
        }

        /// <summary>Get Business Object Definition Id.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <returns>Object ID of Business Object.</returns>
        public string GetBusinessObjectDefinitionByName(string objectName)
        {
            BusinessObjectDef busObDef = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, objectName)) as BusinessObjectDef;
            return busObDef != null ? busObDef.ToXml() : "Error: Object Name not found.";
        }

        /// <summary>Find Business Object record using search criteria.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <param name="recId">Record Id to retrieve.</param>
        /// <returns>First Business Object record found, serialized to XML.</returns>
        public string GetBusinessObjectById(string objectName, string recId)
        {
            BusinessObject busOb = GetBusinessObject(objectName, recId);
            return busOb != null ? busOb.ToXml() : "Error: Record not found.";
        }

        /// <summary>Find Business Object record using search criteria.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <param name="searchFields">String Array of search fields e.g. "Phone=12345,Full Name=John Smith".</param>
        /// <returns>Record ID of first Business Object record found.</returns>
        public string GetBusinessObjectIdsBySearchCriteria(string objectName, string searchFields)
        {
            return GetBusinessObjectIds(objectName, searchFields, false);
        }

        /// <summary>Find Business Object record Public Ids using search criteria.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <param name="searchFields">String Array of search fields e.g. "Phone=12345,Full Name=John Smith".</param>
        /// <returns>List of Public Ids of Business Object records found.</returns>
        public string GetBusinessObjectPublicIdsBySearchCriteria(string objectName, string searchFields)
        {
            return GetBusinessObjectIds(objectName, searchFields, true);
        }

        /// <summary>Create a new user, either Portal or Cherwell</summary>
        /// <param name="securityGroup">The name of the new user's Security Group (portal group for portal users).</param>
        /// <param name="userXml">XML string of new user record (Userinfo or Customer).  Sample XML found in NewUser.xml</param>
        /// <param name="isPortalUser">True if creating a customer, false for a Cherwell client user.</param>
        /// <returns>RecId of User Created.</returns>
        public string CreateNewUser(string securityGroup, string userXml, string isPortalUser)
        {
            if (!string.IsNullOrEmpty(securityGroup) && !string.IsNullOrEmpty(userXml) && !string.IsNullOrEmpty(isPortalUser))
            {
                string userObjectId = string.Empty;

                try
                {
                    CherwellBusinessObject userBusOb = CherwellBusinessObject.FromXmlString(userXml);
                    string securityGroupId = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(SecurityGroup.Class, securityGroup)).Id;

                    if (userBusOb != null)
                        userObjectId = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, userBusOb.Name)).Id;

                    string userRecId = CreateBusinessObject(userBusOb.Name, userXml);

                    AccountCredentialsInfo user = new AccountCredentialsInfo
                    {
                        CherwellIdNewValue = userBusOb.FieldList.Fields.FirstOrDefault(x => x.Name == "Full Name").Value.Replace(" ", ""),
                        PasswordNewValue = "password",
                        SecurityGroupIdNewValue = securityGroupId,
                        UserBusObDefId = userObjectId,
                        UserBusObRecId = userRecId,
                        LoginFlags = bool.Parse(isPortalUser) ? LoginFlags.CustomerLogin : LoginFlags.NormalLogin
                    };

                    TrebuchetApi.Api.AddNewUser(user);
                    return userRecId;
                }
                catch (Exception e)
                {
                    return string.Format("Create New User Failed: {0}", e);
                }
            }

            return "Create New User Failed, please enter a value for each of the parameters.";
        }

        /// <summary>Delete existing user, either Portal or Cherwell</summary>
        /// <param name="email">Email Address of user to delete.</param>
        /// <param name="isPortalUser">True if creating a customer, false for a Cherwell client user.</param>
        /// <returns>RecId of User Created.</returns>
        public string DeleteExistingUser(string email, string isPortalUser)
        {
            QueryDef query = QueryDef.CreateQuery();
            string objectName = bool.Parse(isPortalUser) ? "Customer - Internal" : "UserInfo";
            BusinessObjectDef busObDef = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, objectName)) as BusinessObjectDef;

            query.BusObId = busObDef.Id;
            query.TopCount = 1;

            FieldDef fieldDef = busObDef.Fields.GetFieldByName("Email");
            QueryConditionClause clause = query.TopLevelGroupingClause.CreateFieldValueClause(fieldDef.Id, Operator.Equal, TypedValue.ForString(email));
            query.TopLevelGroupingClause.Clauses.Add(clause);

            QueryCacheManager queryManager = new QueryCacheManager(query);
            queryManager.Initialize(true);
            BusinessObject bo = queryManager.GetCurrentRecord();

            if (bo != null)
            {
                try
                {
                    TrebuchetApi.Api.DeleteUser(bo.RecId);
                    TrebuchetApi.Api.BusObServices.DeleteBusinessObject(bo);
                }
                catch (Exception e)
                {
                    return string.Format("User Deletion Failed: {0}", e);
                }

                return "User Deleted Successfully";
            }

            return string.Format("User Deletion Failed: {0} not found.", email);
        }

        #endregion

        #region Private Methods

        /// <summary>Find Business Object record using search criteria.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <param name="recId">Record Id to retrieve.</param>
        /// <returns>First Business Object record found.</returns>
        private BusinessObject GetBusinessObject(string objectName, string recId)
        {
            BusinessObjectDef busObDef = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, objectName)) as BusinessObjectDef;

            if (busObDef != null && !string.IsNullOrEmpty(recId))
            {
                BusinessObject busOb = TrebuchetApi.Api.BusObServices.GetBusinessObjectByRecId(busObDef.Id, recId);
                return busOb;
            }

            return null;
        }

        /// <summary>Find Business Object record using search criteria.</summary>
        /// <param name="objectName">Name of Business Object type to retrieve, eg. 'Incident'.</param>
        /// <param name="searchFields">String of search fields e.g. "Phone=12345,Full Name=John Smith"..</param>
        /// <param name="returnPublicIds">True to return Public Ids, False to return RecIds</param>
        /// <returns>First Business Object record found.</returns>
        private string GetBusinessObjectIds(string objectName, string searchFields, bool returnPublicIds)
        {
            QueryDef query = QueryDef.CreateQuery();
            BusinessObjectDef busObDef = TrebuchetApi.Api.DefinitionRepository.GetDefinition(DefRequest.ByName(BusinessObjectDef.Class, objectName)) as BusinessObjectDef;
            Dictionary<string, string> fieldsDict = new Dictionary<string, string>();

            try
            {
                foreach (string searchField in searchFields.Split(','))
                {
                    string[] fieldSplit = searchField.Split('=');
                    fieldsDict.Add(fieldSplit[0], fieldSplit[1]);
                }
            }
            catch(Exception)
            {
                return "Request failed, Search Fields are not in the correct format: Field=Value,Field=Value";
            }

            if (busObDef != null)
            {
                query.BusObId = busObDef.Id;

                foreach (var field in fieldsDict)
                {
                    FieldDef fieldDef = busObDef.Fields.GetFieldByName(field.Key);

                    if (fieldDef != null)
                    {
                        QueryConditionClause clause = query.TopLevelGroupingClause.CreateFieldValueClause(fieldDef.Id, Operator.Equal, TypedValue.ForString(field.Value));
                        query.TopLevelGroupingClause.Clauses.Add(clause);
                    }
                    else
                    {
                        return string.Format("Error: {0} is not a recognised field name.", field.Key);
                    }
                }
            }

            List<string> returnList = new List<string>();
            QueryCacheManager queryManager = new QueryCacheManager(query);
            queryManager.Initialize(true);
            var businessObjects = queryManager.GetRecordList();
            foreach (KeyHolder key in businessObjects)
            {
                BusinessObject busOb = TrebuchetApi.Api.BusObServices.GetBusinessObjectByNameAndRecId(objectName, key.Id);

                if (returnPublicIds)
                    returnList.Add(busOb.PublicId);
                else
                    returnList.Add(busOb.RecId);
            }

            return string.Join(",", returnList.ToArray());
        }

        #endregion
    }
}
